package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import domain.model.Tour;

public class TourRepository extends RepositoryBase{
	
	String insertSql = "INSERT INTO tour(name, dateOfDeparture, price, cityOfDeparture, amounOfDays) VALUES (?,?,?,?,?)";
	String selectByIdSql = "SELECT * FROM tour WHERE id=?";
	String updateByIdSql = "UPDATE tour SET NAME=? WHERE id=?";
	String deleteByIdSql = "DELETE FROM tour where id=?";
	String getAllSql = "SELECT * FROM tour";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement updateById;
	PreparedStatement deleteById;
	static PreparedStatement getAll; 
	
	public TourRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			updateById = connection.prepareStatement(updateByIdSql);
			deleteById = connection.prepareStatement(deleteByIdSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Tour get(int tourId){
		try{
			selectById.setInt(1, tourId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Tour result = new Tour();
				result.setId(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setDateOfDeparture(rs.getDate("dateOfDeparture"));
				result.setCityOfDeparture(rs.getString("cityOfDeparture"));
				result.setAmountOfDays(rs.getInt("amountOfDays"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	
	public void add(Tour tour) {
		try {
			insert.setString(1, tour.getName());
			insert.setDate(2, (Date) tour.getDateOfDeparture());
			insert.setString(3, tour.getCityOfDeparture());
			insert.setInt(4, tour.getAmountOfDays());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}
	
	public void update(Tour tour){
		 try {
			updateById.setString(1, tour.getName());
			updateById.setDate(2, (Date) tour.getDateOfDeparture());
		    updateById.setString(3, tour.getCityOfDeparture());
		    updateById.setInt(4, tour.getAmountOfDays());
		} catch (SQLException e) {
		      e.printStackTrace();
		}
}
	
	public void delete(Tour tour){
		try{
		    deleteById.setInt(1, tour.getId());
		}catch(Exception e) {
			  e.printStackTrace();
		}
}
	
	public static List <Tour> getAll(){
		List <Tour> list = new ArrayList<Tour>();
		try{
			ResultSet rs = getAll.executeQuery();
			while(rs.next()){
				Tour result = new Tour();
				result.setId(rs.getInt(1));
				result.setName(rs.getString(2));
				result.setDateOfDeparture(rs.getDate(3));
				result.setCityOfDeparture(rs.getString(4));
				result.setAmountOfDays(rs.getInt(5));
				list.add(result);
			}
	}catch(Exception e)
		{e.printStackTrace();}
		return list;
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE payment("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "dateOfDeparture date," + "cityOfDeparture varchar(20),"+ "amountOfDays int,"
				+ "FOREIGN KEY (PAYMENT_ID) REFERENCES payment(id),"
		        + "FOREIGN KEY (CLIENT_ID) REFERENCES client(id),"
		        + "FOREIGN KEY (HOTEL_ID) REFERENCES hotel(id),"
		        + "FOREIGN KEY (COUNTRY_ID) REFERENCES country(id),"
		        + "FOREIGN KEY (EMPLOYEE_ID) REFERENCES employee(id),"
		        + "FOREIGN KEY (MEAL_ID) REFERENCES meal(id)," + ")";		
	}

	@Override
	protected String tableName() {
		return "tour";
	}
}

