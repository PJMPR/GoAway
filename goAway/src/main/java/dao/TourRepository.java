package dao;

import dao.mappers.IMapResultSetIntoEntity;
import java.sql.Connection;
import java.sql.Date;
import java.sql.SQLException;

import domain.model.EnumDictionary;
import domain.model.Tour;

public class TourRepository extends RepositoryBase<Tour>{
	
	public TourRepository(Connection connection, IMapResultSetIntoEntity<Tour> mapper) {
        super(connection, mapper);
    }

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE tour("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "dateOfDeparture date," + "cityOfDeparture varchar(20),"+ "amountOfDays int,"
				+ "FOREIGN KEY (PAYMENT_ID) REFERENCES payment(id),"
		        + "FOREIGN KEY (CLIENT_ID) REFERENCES client(id),"
		        + "FOREIGN KEY (HOTEL_ID) REFERENCES hotel(id),"
		        + "FOREIGN KEY (EMPLOYEE_ID) REFERENCES employee(id),"
		        + "FOREIGN KEY (ENUM_DICTIONARY_ID) REFERENCES enum_dictionary(id)," + ")";		
	}

    @Override
    protected String tableName() {
        return "tour";
    }

    @Override
    protected String insertSql() {
        return "INSERT INTO tour("
                + "name, dateOfDeparture, cityOfDeparture, amountOfDays"
                + "PAYMENT_ID,"
                + "CLIENT_ID,"
                + "HOTEL_ID,"
                + "EMPLOYEE_ID,"
                + "ENUM_DICTIONARY_ID"
                + ") VALUES (?,?,?,?,?,?,?,?,?)";
    }

    @Override
    protected String updateSql() {
        return "UPDATE TOUR SET (name, dateOfDeparture, cityOfDeparture, amountOfDays, PAYMENT_ID" +
                ", CLIENT_ID, HOTEL_ID, EMPLOYEE_ID, ENUM_DICTIONARY_ID)= (?,?,?,?,?,?,?,?,?) WHERE id = ?";
    }

    @Override
    protected void setUpdate(Tour entity) throws SQLException {
        update.setString(1, entity.getName());
        update.setDate(2, (Date) entity.getDateOfDeparture());
        update.setString(3, entity.getCityOfDeparture());
        update.setInt(4, entity.getAmountOfDays());
        update.setInt(5, entity.getPayment().getId());
        update.setInt(6, entity.getClient().getId());
        update.setInt(7, entity.getHotel().getId());
        update.setInt(8, entity.getEmployee().getId());
        update.setInt(9, entity.getId());
    }

    @Override
    protected void setInsert(Tour entity) throws SQLException {
    	 insert.setString(1, entity.getName());
    	 insert.setDate(2, (Date) entity.getDateOfDeparture());
    	 insert.setString(3, entity.getCityOfDeparture());
    	 insert.setInt(4, entity.getAmountOfDays());
    	 insert.setInt(5, entity.getPayment().getId());
    	 insert.setInt(6, entity.getClient().getId());
    	 insert.setInt(7, entity.getHotel().getId());
    	 insert.setInt(8, entity.getEmployee().getId());
    	 insert.setInt(9, entity.getId());
	}
}

