package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import domain.model.Payment;

public class PaymentRepository extends RepositoryBase{
	
	String insertSql = "INSERT INTO payment(date, quantity) VALUES (?,?)";
	String selectByIdSql = "SELECT * FROM payment WHERE id=?";
	String updateByIdSql = "UPDATE payment SET NAME=? WHERE id=?";
	String deleteByIdSql = "DELETE FROM payment where id=?";
	String getAllSql = "SELECT * FROM payment";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement updateById;
	PreparedStatement deleteById;
	static PreparedStatement getAll; 
	
	public PaymentRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			updateById = connection.prepareStatement(updateByIdSql);
			deleteById = connection.prepareStatement(deleteByIdSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Payment get(int paymentId){
		try{
			selectById.setInt(1, paymentId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Payment result = new Payment();
				result.setId(rs.getInt("id"));
				result.setDate(rs.getDate("date"));
				result.setQuantity(rs.getInt("quantity"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	
	public void add(Payment payment) {
		try {
			insert.setDate(1, (Date) payment.getDate());
			insert.setInt(2, payment.getQuantity());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}
	
	public void update(Payment payment){
		 try {
			updateById.setDate(1, (Date) payment.getDate());
		    updateById.setInt(2, payment.getQuantity());
		} catch (SQLException e) {
		      e.printStackTrace();
		}
}
	
	public void delete(Payment payment){
		try{
		    deleteById.setInt(1, payment.getId());
		}catch(Exception e) {
			  e.printStackTrace();
		}
}
	
	public static List <Payment> getAll(){
		List <Payment> list = new ArrayList<Payment>();
		try{
			ResultSet rs = getAll.executeQuery();
			while(rs.next()){
				Payment result = new Payment();
				result.setId(rs.getInt(1));
				result.setDate(rs.getDate(2));
				result.setQuantity(rs.getInt(3));
				list.add(result);
			}
	}catch(Exception e)
		{e.printStackTrace();}
		return list;
	}

	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE payment("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "date date," + "quantity int,"
				+ "FOREIGN KEY (TOUR_ID) REFERENCES tour(id),"
		        + "FOREIGN KEY (EMPLOYEE_ID) REFERENCES employee(id),"
		        + "FOREIGN KEY (CLIENT_ID) REFERENCES client(id)," + ")";		
	}

	@Override
	protected String tableName() {
		return "client";
	}
}
